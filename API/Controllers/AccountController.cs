using System.Security.Cryptography;
using System.Text;
using API.Data;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers;

public class AccountController : BaseApiController
{
    private readonly DataContext _context;
    private readonly ITokenService _tokenService;

    // note we don't need to initialize _tokenService since it is injected by the framework and will be available by that name
    public AccountController(DataContext context, ITokenService tokenService)
    {
        _context = context;
        _tokenService = tokenService;
    }

    [HttpPost("register")] // POST: api/account
    public async Task<ActionResult<UserDto>> Register(RegisterDto registerDto) // params is an object since the body to a POST is an obj
    {
        // note: the json prop names are lowercase, but thenames in the DTO are pascal case - this is convention and will be converted appropriately
        if (await UserExists(registerDto.Username)) return BadRequest("Username is taken.");

        // using keyword means to clean up memory after the class is done being in use
        // using can be applied to any class that implements the IDisposable interface
        using var hmac = new HMACSHA512(); // hashing algo from library

        var user = new AppUser
        {
            UserName = registerDto.Username.ToLower(),
            PasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)), // need to get the bytes to conform to byte array in user entity
            PasswordSalt = hmac.Key // random key that is made by the HMAC512 instance
        };

        _context.Users.Add(user);
        await _context.SaveChangesAsync();

        return new UserDto
        {
            Username = user.UserName,
            Token = _tokenService.CreateToken(user)
        };
    }

    [HttpPost("login")]
    public async Task<ActionResult<UserDto>> Login(LoginDto loginDto)
    {
        // we can use single or first or default here - single is fine because there will always just be one user as all users are unique
        var user = await _context.Users.SingleOrDefaultAsync(x => x.UserName == loginDto.Username);

        if (user == null) return Unauthorized("Invalid username");

        // we pass in the key used to get back the same hashing algo that was used when we hashed the password
        // the key was generated by HMACSHA512 when we created the user.
        using var hmac = new HMACSHA512(user.PasswordSalt);

        // hmac is a byte array and we need the hashed version of the pw
        var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(loginDto.Password));
        // loop through byte array and compare with the bytes of the byte arr in the db
        for (int i = 0; i < computedHash.Length; i++)
        {
            if (computedHash[i] != user.PasswordHash[i]) return Unauthorized("Invalid password");
        }

        return new UserDto
        {
            Username = user.UserName,
            Token = _tokenService.CreateToken(user)
        };
    }
    // Helper method - make async because we need to go to our database to check users
    private async Task<bool> UserExists(string username)
    {
        return await _context.Users.AnyAsync(x => x.UserName == username.ToLower());
    }
}
